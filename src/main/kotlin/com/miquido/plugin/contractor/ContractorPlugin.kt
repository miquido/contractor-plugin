/*
 * This source file was generated by the Gradle 'init' task
 */
package com.miquido.plugin.contractor

import com.miquido.plugin.contractor.configuration.ContractorConfiguration
import com.miquido.plugin.contractor.extension.dir
import com.miquido.plugin.contractor.extension.normalizedPath
import com.miquido.plugin.contractor.extension.register
import com.miquido.plugin.contractor.task.DependsOnMultipleTasksAction
import com.miquido.plugin.contractor.task.TaskName
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.tasks.Delete
import org.gradle.api.tasks.Exec
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

/**
 * Contractor Plugin is a plugin that generates API interfaces with *openapi-generator-gradle-plugin*
 * with prepared format, and also it download or copy necessary OpenAPI definition.
 */
open class ContractorPlugin : Plugin<Project> {

    private val cleanupTaskName = "cleanupTask"
    private val prepareApiGeneratorDirectory = TaskName("prepareApiGeneratorDirectory")

    private lateinit var configuration: ContractorConfiguration

    override fun apply(project: Project) {
        configuration = project.extensions.create("contractorPluginConfiguration", ContractorConfiguration::class.java)

        project.afterEvaluate {
            registerTasks(project, configuration)
            prepareTasksOrder(project, configuration)
        }
    }

    private fun registerTasks(project: Project, configuration: ContractorConfiguration) {
        project.tasks.register(
            prepareApiGeneratorDirectory,
            Exec::class.java,
            prepareApiGeneratorDirectory()
        )
        configuration.contracts.forEach { contract ->
            contract.registerTasks(project, configuration)
        }
        project.tasks.register(cleanupTaskName, Delete::class.java, cleanup())
    }

    private fun prepareTasksOrder(project: Project, configuration: ContractorConfiguration){
        var dependentTaskName = prepareApiGeneratorDirectory
        configuration.contracts.forEach { contract ->
            contract.prepareTasksOrder(project, dependentTaskName)
            dependentTaskName = contract.getTasksNames(project).last()
        }

        project.tasks.named(
            cleanupTaskName,
            DependsOnMultipleTasksAction(
                project,
                buildList {
                    add(prepareApiGeneratorDirectory)
                    addAll(configuration.contracts.flatMap { it.getTasksNames(project) })
                }
            )
        )

        project.tasks.withType(KotlinCompile::class.java) {
            it.dependsOn(cleanupTaskName)
        }
    }

    private fun prepareApiGeneratorDirectory(): Exec.() -> Unit = {
        Constant.run {
            executable = "mkdir"
            args = listOf("-p", rootDir.normalizedPath())
        }
    }

    private fun cleanup(): Delete.() -> Unit = {
        Constant.run {
            delete(project.layout.projectDirectory.dir(specificationDir))
        }
    }
}
