/*
 * This source file was generated by the Gradle 'init' task
 */
package com.miquido.plugin.contractor

import com.miquido.contractor_plugin.BuildConfig
import com.miquido.plugin.contractor.configuration.ContractorConfiguration
import java.io.File
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.tasks.Copy
import org.gradle.api.tasks.Delete
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

/**
 * Contractor Plugin is a plugin that generates API interfaces with *openapi-generator-gradle-plugin*
 * with prepared format, and also it download or copy necessary OpenAPI definition.
 */
open class ContractorPlugin : Plugin<Project> {

    private val cleanupTaskName = "cleanupTask"
    private val copyGeneratorPluginResourcesTaskName = "copyGeneratorPluginResourcesTask"

    private lateinit var configuration: ContractorConfiguration

    override fun apply(project: Project) {
        configuration = project.extensions.create("contractorPluginConfiguration", ContractorConfiguration::class.java)

        project.afterEvaluate {
            registerTasks(project, configuration)
            prepareTasksOrder(project, configuration)
        }
    }

    private fun registerTasks(project: Project, configuration: ContractorConfiguration) {
        project.tasks.register(copyGeneratorPluginResourcesTaskName, Copy::class.java, copyGeneratorPluginResourcesTask())
        configuration.contracts.forEach { contract ->
            contract.registerTasks(project, configuration)
        }
        project.tasks.register(cleanupTaskName, Delete::class.java, cleanup())
    }

    private fun prepareTasksOrder(project: Project, configuration: ContractorConfiguration){
        configuration.contracts.forEach { contract ->
            contract.prepareTasksOrder(project, copyGeneratorPluginResourcesTaskName)
        }
        project.tasks.named(cleanupTaskName) { deleteTempTask ->
            deleteTempTask.dependsOn(copyGeneratorPluginResourcesTaskName)
            val contractTasksNames = configuration.contracts.flatMap { it.getTasksNames(project) }
            deleteTempTask.dependsOn(contractTasksNames)
        }
        project.tasks.withType(KotlinCompile::class.java) {
            it.dependsOn(cleanupTaskName)
        }
    }

    private fun copyGeneratorPluginResourcesTask(): Copy.() -> Unit = {
        Constant.run {
            val tempDirectory = File(project.layout.projectDirectory.dir(tempDirectoryName).asFile.absolutePath).apply {
                mkdirs()
            }

            // TODO: copy all resources
            project.plugins.getPlugin(BuildConfig.APP_NAME)
                .javaClass
                .classLoader
                .getResourceAsStream("configuration/apiInterface.mustache")
                .let { resource ->
                    File(tempDirectory.absolutePath + File.separator + "apiInterface.mustache").let {
                        resource?.copyTo(it.outputStream())
                    }
                }

            from(project.layout.projectDirectory.dir("./$tempDirectoryName"))
            into(project.layout.projectDirectory.dir("./$configurationDir"))
        }
    }

    fun cleanup(): Delete.() -> Unit = {
        Constant.run {
            delete(project.layout.projectDirectory.dir(tempDirectoryName))
            delete(project.layout.projectDirectory.dir(specificationDir))
            delete(project.layout.projectDirectory.dir(configurationDir))
        }
    }
}
